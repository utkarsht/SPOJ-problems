//		refer: https://github.com/SharmaManish/Spoj/blob/master/ONEZERO.cpp
//		each time we are generating number with 1,0 and check whether it is multiple of give number or not
//		main optimisation step is visit ,  once we get a mod value we visit it then if again we get same mod we will not push
//		values generated by this number.		(  check 396 with and without visit	)

#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define M 2000
bool visit[20002];
bool onezero(int n)
{
	while(n>0)
	{
		if(n%10 != 0 && n%10 != 1)
			return false;
		n/=10;
	}
	return true;
}
int mod(string& k ,int l,int n)
{
	int r = 0;
	for(int i=0;i<l;i++)
	{
		r = r*10 + (k[i]-'0');
		r %= n;
	}
	return r;
}
int main()
{
	int t,n,l,rem;
	string k;
	cin>>t;
	while(t--)
	{
		queue<string> q;
		memset(&visit,0,sizeof(visit));
		cin>>n;
		if(onezero(n)==1)		{ 	cout<<n<<endl;	continue;	}
		k = "1";
		q.push(k);
	//	visit[1%n] = 1;
		while(!q.empty())
		{
			k = q.front();		q.pop();
			l = k.length();
			cout<<k<<endl;
			rem = mod(k,l,n);
			if(rem==0)		{	cout<<k<<endl;	break;	}
			else if(visit[rem]==0)				
			{
				visit[rem] = 1;
				q.push(k + "0");	
				q.push(k + "1");	 
			}
		}
	}
}
